import struct

# Constants for MD5 algorithm
MD5_CONSTANTS = [
    0x67452301,
    0xEFCDAB89,
    0x98BADCFE,
    0x10325476,
]

# Shift amounts for each round
SHIFT_AMOUNTS = [[7, 12, 17, 22], [5, 9, 14, 20], [4, 11, 16, 23], [6, 10, 15, 21]]

# Constants for each round
ROUND_CONSTANTS = [[0, 1, 2, 3], [1, 2, 3, 0], [2, 3, 0, 1], [3, 0, 1, 2]]


def left_rotate(value, shift):
    return ((value << shift) | (value >> (32 - shift))) & 0xFFFFFFFF


def md5_hash(data):
    # Initialize hash values
    a, b, c, d = MD5_CONSTANTS[0], MD5_CONSTANTS[1], MD5_CONSTANTS[2], MD5_CONSTANTS[3]

    # Pre-processing: padding the input
    original_length = len(data)
    data += bytes([0x80])
    while len(data) % 64 != 56:
        data += bytes([0x00])
    data += struct.pack("<Q", original_length * 8)

    for i in range(0, len(data), 64):
        chunk = data[i : i + 64]
        words = struct.unpack("<16I", chunk)

        aa, bb, cc, dd = a, b, c, d

        for j in range(4):
            for k in range(4):
                F = (b & c) | ((~b) & d)
                G = j * 4 + k
                F = (F + a + words[G] + ROUND_CONSTANTS[j][k]) & 0xFFFFFFFF
                a, b, c, d = (
                    d,
                    (b + left_rotate(F, SHIFT_AMOUNTS[j][k])) & 0xFFFFFFFF,
                    b,
                    c,
                )

        a, b, c, d = (
            (a + aa) & 0xFFFFFFFF,
            (b + bb) & 0xFFFFFFFF,
            (c + cc) & 0xFFFFFFFF,
            (d + dd) & 0xFFFFFFFF,
        )

    # Combine hash values
    result = struct.pack("<4I", a, b, c, d)
    return result.hex()


# Example usage:
text_to_hash = "Hello World!"
hashed_value = md5_hash(text_to_hash.encode("utf-8"))
print("MD5 Hash:", hashed_value)
